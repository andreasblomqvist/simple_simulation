variables:
  FRONTEND_DEPLOYMENT_FILE: "k8s/frontend-deployment.yaml"
  BACKEND_DEPLOYMENT_FILE: "k8s/backend-deployment.yaml"

default:
  tags:
    - aws-edgez-prd-k8s

stages: [validate, test, build, deploy]

include:
  - component: gitlab.netlight.com/components/opentofu/validate-plan-apply@2.6.1
    inputs:
      opentofu_version: 1.9.1
      root_dir: infra
      job_name_prefix: "aws-"
  - component: $CI_SERVER_FQDN/components/docker-build/buildkit@1.2.0
    inputs:
      tags: aws-edgez-prd-k8s
      name: simplesim-backend
      job_prefix: backend-
      dockerfile: Dockerfile.backend
      environment: prod
  - component: $CI_SERVER_FQDN/components/docker-build/buildkit@1.2.0
    inputs:
      tags: aws-edgez-prd-k8s
      name: simplesim-frontend
      job_prefix: frontend-
      dockerfile: Dockerfile.frontend
      environment: prod

.git:push:
  after_script:
    # Go to the new directory
    - cd "${CI_COMMIT_SHA}"

    # Add all generated files to Git
    - git add k8s
    - git status

    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        # Show the status of files that are about to be created, updated or deleted
        git status

        # Commit all changes
        git commit -m "${COMMIT_MESSAGE}"

        # Update the repository and make sure to skip the pipeline create for this commit
        git push origin "${CI_DEFAULT_BRANCH}" -o ci.skip
      fi
  before_script:
    # Clone the repository via HTTPS inside a new directory
    - git clone "https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"

    # Set the displayed user with the commits that are about to be made
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
  image:
    entrypoint: [""]
    name: alpine/git:${GIT_VERSION}
  stage: deploy

update-k8s-image-tags:
  stage: deploy
  image: alpine/git:latest
  extends: .git:push
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual
  script:
    - cd "${CI_COMMIT_SHA}"
    - |
      echo "Current commit SHA: $CI_COMMIT_SHA"
    - |
      echo "Short commit SHA: $CI_COMMIT_SHORT_SHA"

    # Update frontend deployment file
    - echo "Updating frontend deployment..."
    - |
      sed -i -E 's|(723216754178\.dkr\.ecr\.eu-west-1\.amazonaws\.com/simplesim-frontend:)[^[:space:]]*|\1'$CI_COMMIT_SHORT_SHA'|g' $FRONTEND_DEPLOYMENT_FILE

    # Update backend deployment file
    - echo "Updating backend deployment..."
    - |
      sed -i -E 's|(723216754178\.dkr\.ecr\.eu-west-1\.amazonaws\.com/simplesim-frontend:)[^[:space:]]*|\1'$CI_COMMIT_SHORT_SHA'|g' $BACKEND_DEPLOYMENT_FILE

    # Show the changes
    - echo "=== Updated Frontend Deployment ==="
    - cat $FRONTEND_DEPLOYMENT_FILE
    - echo ""
    - echo "=== Updated Backend Deployment ==="
    - cat $BACKEND_DEPLOYMENT_FILE
  artifacts:
    paths:
      - $FRONTEND_DEPLOYMENT_FILE
      - $BACKEND_DEPLOYMENT_FILE
    expire_in: 1 hour
    when: always
