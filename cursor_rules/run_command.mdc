---
description: 
globs: 
alwaysApply: false
---
# Cursor Rule: run_command

## Purpose
This rule governs how commands, server management, git operations, and architectural changes are handled in this project to ensure safety, reproducibility, developer control, and architectural consistency.

---

## Architecture Documentation Rule
- **ALWAYS** reference `docs/ARCHITECTURE.md` before making any significant changes to the codebase.
- **REQUIRED** to understand the current system architecture, data flow, and component responsibilities before implementing new features or modifications.
- **MANDATORY** to follow the architectural principles outlined in the documentation, especially regarding:
  - Single source of truth for business logic (simulation engine)
  - Thin adapter/service layers
  - Data transformation patterns
  - Risk mitigation strategies
- **FORBIDDEN** to implement changes that violate the architectural principles without explicit user approval and documentation updates.
- **REQUIRED** to update `docs/ARCHITECTURE.md` if architectural changes are made.

**Example Workflow:**
```
AI: Before implementing this feature, let me check the architecture documentation...
[reads docs/ARCHITECTURE.md]
AI: Based on the architecture, I should implement this as a thin adapter that...
User: proceed
AI: [implements according to architectural principles]
```

---

## Git Operations & Commit Rules
- **NEVER** commit or push without explicit user permission.
- **ALWAYS** ask the user for permission before any git operations.
- **WAIT** for explicit user confirmation before proceeding.
- **ONLY** commit/push when the user explicitly requests it (e.g., "commit", "push", "save changes").
- **FORBIDDEN:**
  - Auto-committing or auto-pushing after code changes.
  - Assuming user wants git operations.
  - Proceeding without explicit confirmation.

**Example Workflow:**
```
AI: I've made the changes. Would you like me to commit and push these changes?
User: yes, commit and push
AI: [proceeds with git add, commit, and push]
```

---

## Server Management & Terminal Usage
- **Always run development servers in Cursor's Terminal windows** for better workflow integration.
- **Recommended Terminal Setup:**
  - Terminal 1: Backend Server (uvicorn) with logging
  - Terminal 2: Frontend Server (npm/vite) with logging
  - Terminal 3: Commands, testing, git operations
  - Terminal 4: Log tailing (optional)
- **Before starting servers, check for existing instances** (use `lsof`, `ps`, or `pkill` as appropriate).
- **Kill existing server instances if needed** before starting new ones.
- **Use provided scripts** for starting/stopping servers when possible:
  - `./scripts/start-servers-with-logs.sh`
  - `./scripts/start-backend-with-logs.sh`
  - `./scripts/start-frontend-with-logs.sh`
  - `./scripts/restart-servers.sh`

---

## Manual Startup (if scripts unavailable)
- **Backend:**
  ```bash
  PYTHONPATH=. python3 -m uvicorn backend.main:app --reload --host 0.0.0.0 --port 8000
  ```
- **Frontend:**
  ```bash
  cd frontend && npm run dev
  ```

## PowerShell Syntax Rules
- **NEVER use `&&` syntax in PowerShell** - it's not supported and will cause errors
- **ALWAYS use `;` (semicolon) for command chaining in PowerShell**
- **Use proper PowerShell environment variable syntax:**
  - `$env:PYTHONPATH="."` (not `PYTHONPATH=.`)
  - `$env:NODE_ENV="development"` (not `NODE_ENV=development`)
- **Correct PowerShell examples:**
  ```powershell
  cd frontend; npm run dev
  cd backend; $env:PYTHONPATH="."; python -m uvicorn backend.main:app --reload --host 0.0.0.0 --port 8000
  Start-Sleep -Seconds 5; Invoke-WebRequest -Uri "http://localhost:8000/health"
  ```
- **Incorrect (will fail):**
  ```powershell
  cd frontend && npm run dev  # ❌ FAILS
  PYTHONPATH=. python3 -m uvicorn backend.main:app  # ❌ FAILS
  ```

---

## Log Management
- Backend logs: `backend/logs/backend.log`
- Frontend logs: `frontend/logs/frontend.log`
- Use `tail -f` to monitor logs in real time.

---

## Emergency Server Restart
- Kill all servers and restart with:
  ```bash
  pkill -f uvicorn && pkill -f vite && sleep 3
  ./scripts/start-servers-with-logs.sh
  ```

---

## Quick Server Status Check
- Use `curl` to check backend and frontend health endpoints.
- Use `lsof` or `ps` to check for running processes on ports 8000 (backend) and 3000 (frontend).

---

## Testing Year Navigation Features
- Access the Year Navigation Demo at `http://localhost:3000/year-demo`.
- Run backend tests for year-based features:
  ```bash
  python3 -m pytest backend/tests/unit/test_year_based_simulation.py
  ```

