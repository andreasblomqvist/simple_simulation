---
description:
globs:
alwaysApply: false
---
# Run Command Instructions for SimpleSim

## Overview
This document provides instructions for properly running commands in the SimpleSim project, specifically addressing PowerShell syntax and common command patterns.

## PowerShell Command Syntax

### ❌ WRONG - Unix/Bash Style (Don't Use)
```bash
# These will fail in PowerShell
cd .. && python -m uvicorn backend.main:app --reload --port 8000
npm start && echo "Started"
```

### ✅ CORRECT - PowerShell Style (Use These)
```powershell
# Use semicolons for command chaining
cd ..; python -m uvicorn backend.main:app --reload --port 8000

# Or use separate commands
cd ..
python -m uvicorn backend.main:app --reload --port 8000

# For conditional execution
if ($?) { echo "Command succeeded" }
```

## Common Commands for SimpleSim

### Backend Development

#### Start Backend Server
```powershell
# From project root
python -m uvicorn backend.main:app --reload --port 8000

# With specific host
python -m uvicorn backend.main:app --reload --host 0.0.0.0 --port 8000
```

#### Test Backend Import
```powershell
python -c "from backend.main import app; print('Backend import successful')"
```

#### Run Backend Tests
```powershell
cd backend
python -m pytest tests/ -v
```

### Frontend Development

#### Start Frontend Server
```powershell
cd frontend
npm start
```

#### Install Frontend Dependencies
```powershell
cd frontend
npm install
```

#### Build Frontend
```powershell
cd frontend
npm run build
```

### Database/Configuration

#### Generate Office Configuration
```powershell
cd scripts
python generate_monthly_excel.py
```

#### Verify Configuration
```powershell
python verify_config.py
```

### Git Operations

#### Add and Commit Changes
```powershell
git add .
git commit -m "Your commit message"
git push origin master
```

#### Check Status
```powershell
git status
git log --oneline -10
```

### File Operations

#### Copy Files (PowerShell)
```powershell
Copy-Item source.txt destination.txt
Copy-Item -Recurse source_folder destination_folder
```

#### Remove Files/Directories
```powershell
Remove-Item file.txt
Remove-Item -Recurse -Force directory_name
```

#### Rename Files/Directories
```powershell
Rename-Item old_name new_name
```

### Network Testing

#### Test API Endpoints
```powershell
# Test health endpoint
curl http://localhost:8000/health

# Test with Invoke-WebRequest (more PowerShell native)
Invoke-WebRequest -Uri "http://localhost:8000/health" -Method GET

# POST request with JSON
Invoke-WebRequest -Uri "http://localhost:8000/simulation/run" -Method POST -ContentType "application/json" -Body '{"start_year":2025,"start_month":1,"end_year":2025,"end_month":3,"price_increase":0.03,"salary_increase":0.03}'
```

#### Check Running Processes
```powershell
# Check if backend is running
netstat -ano | findstr :8000

# Check if frontend is running  
netstat -ano | findstr :3000

# Get process details
Get-Process | Where-Object {$_.ProcessName -like "*python*"}
```

### Environment Management

#### Python Virtual Environment
```powershell
# Create virtual environment
python -m venv .venv

# Activate virtual environment
.venv\Scripts\Activate.ps1

# Deactivate
deactivate

# Install requirements
pip install -r requirements.txt
```

#### Node.js Environment
```powershell
# Check versions
node --version
npm --version

# Clear npm cache
npm cache clean --force
```

## Project Structure Commands

### Navigate Project
```powershell
# Go to project root
cd C:\Users\andre\Code\SimpleSim

# Navigate to backend
cd backend

# Navigate to frontend  
cd frontend

# Navigate to scripts
cd scripts

# Go back to parent
cd ..

# Go to specific subdirectory
cd backend\routers
```

### List Directory Contents
```powershell
# Basic listing
ls

# Detailed listing
Get-ChildItem | Format-Table Name, Length, LastWriteTime

# Show hidden files
Get-ChildItem -Force
```

## Troubleshooting

### Common Issues

#### 1. "Token '&&' is not a valid statement separator"
**Problem**: Using Unix/Bash syntax in PowerShell
**Solution**: Use semicolon (`;`) or separate commands

#### 2. "Module not found" errors
**Problem**: Python path issues
**Solution**: 
```powershell
# Run from project root
cd C:\Users\andre\Code\SimpleSim
python -c "import sys; print(sys.path)"
```

#### 3. Port already in use
**Problem**: Previous server still running
**Solution**:
```powershell
# Find process using port
netstat -ano | findstr :8000

# Kill process (replace PID with actual process ID)
taskkill /PID 12345 /F
```

#### 4. Permission denied
**Problem**: PowerShell execution policy
**Solution**:
```powershell
# Check current policy
Get-ExecutionPolicy

# Set policy (run as administrator)
Set-ExecutionPolicy RemoteSigned
```

## Best Practices

### 1. Always Use Full Paths
```powershell
# Good
cd C:\Users\andre\Code\SimpleSim
python -m uvicorn backend.main:app --reload --port 8000

# Avoid relative path confusion
```

### 2. Check Current Directory
```powershell
# Show current location
pwd
Get-Location
```

### 3. Use Background Processes for Servers
```powershell
# Start backend in background (for development)
Start-Process powershell -ArgumentList "-Command", "python -m uvicorn backend.main:app --reload --port 8000"
```

### 4. Environment Variables
```powershell
# Set environment variables
$env:PYTHONPATH = "C:\Users\andre\Code\SimpleSim"
$env:NODE_ENV = "development"

# Check environment variables
$env:PATH
```

## Quick Reference

| Task | Command |
|------|---------|
| Start Backend | `python -m uvicorn backend.main:app --reload --port 8000` |
| Start Frontend | `cd frontend; npm start` |
| Test Backend | `curl http://localhost:8000/health` |
| Generate Config | `cd scripts; python generate_monthly_excel.py` |
| Git Commit | `git add .; git commit -m "message"; git push origin master` |
| Check Ports | `netstat -ano \| findstr :8000` |
| Current Dir | `pwd` |
| List Files | `ls` or `Get-ChildItem` |

## Notes

- Always run commands from the correct directory context
- Use PowerShell-native commands when possible
- Check process status before starting servers
- Use virtual environments for Python dependencies
- Keep terminal sessions organized (separate for backend/frontend)

---

*Last updated: June 2025*
*Project: SimpleSim Organization Growth Simulator*
